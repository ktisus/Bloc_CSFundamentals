1. What is a binary tree and what makes it unique to other trees?
A binary tree is a data structure developers use to support quick searches, 3D game object rendering, file compression, and more.
      A binary tree is unique because every Node can only have up to two child Nodes. 

2. What is a heuristic?
It is a guess that an algorithm makes to solve a complex problem sooner by sacrificing accuracy.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?
Canadian traveler problem

4. What is the difference between a depth-first search and a breadth-first search?
DFS is the process of traveling down a single branch in search of the desired element.
A Breadth-First Search (BFS) is the process of searching an entire row of Nodes prior to proceed to the next.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
- An undirected graph is a set of objects (called vertices or nodes) that are connected together, where all the edges are bidirectional.
- A-cyclic graphs do not form loops; performing a DFS of an a-cyclic graph will result in a dead-end.
- Unweighted graphs do not assign the cost of travel between Nodes.

6. What kind of graph is a binary search tree?
Directed, a-cyclic, unweighted


PROBLEM QUESTIONS

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

class Node {
  constructor(data, left = null, right = null) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

class BST {
  constructor() {
    this.root = null;
  }
  add(data) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(data);
      return;
    } else {
      const searchTree = function(node) {
        if (data < node.data) {
          if (node.left === null) {
            node.left = new Node(data);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (data > node.data) {
          if (node.right === null) {
            node.right = new Node(data);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }
  
  isPresent(data) {
    let current = this.root;
    while (current) {
      if (data === current.data) {
        return true;
      }
      if (data < current.data) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }
}
  
const bst = new BST ();
bst.add(8);
bst.add(3);
bst.add(10);
bst.add(1);
bst.add(6);
bst.add(14);
bst.add(4);
bst.add(7);
bst.add(13);


console.log(bst.isPresent(10));

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

/* Java Program to find distance between n1 and n2 
using one traversal */
public class BNT { 

	public static class Node { 
		int value; 
		Node left; 
		Node right; 

		public Node(int value) { 
			this.value = value; 
		} 
	} 

	public static Node LCA(Node root, int n1, int n2) 
	{ 
		if (root == null) 
			return root; 
		if (root.value == n1 || root.value == n2) 
			return root; 

		Node left = LCA(root.left, n1, n2); 
		Node right = LCA(root.right, n1, n2); 

		if (left != null && right != null) 
			return root; 
		if (left != null) 
			return LCA(root.left, n1, n2); 
		else
			return LCA(root.right, n1, n2); 
	} 

	
	public static int findLevel(Node root, int a, int level) 
	{ 
		if (root == null) 
			return -1; 
		if (root.value == a) 
			return level; 
		int left = findLevel(root.left, a, level + 1); 
		if (left == -1) 
			return findLevel(root.right, a, level + 1); 
		return left; 
	} 

	public static int findDistance(Node root, int a, int b) 
	{ 
		Node lca = LCA(root, a, b); 

		int d1 = findLevel(lca, a, 0); 
		int d2 = findLevel(lca, b, 0); 

		return d1 + d2; 
	} 
	
	 
	public static void main(String[] args) { 
		
		Node root = new Node(8); 
		root.left = new Node(3); 
		root.right = new Node(10); 
		root.left.left = new Node(1); 
		root.left.right = new Node(6); 
		root.right.right = new Node(14);
		root.left.right.left = new Node(4);
		root.left.right.right = new Node(7); 
		root.right.right.left = new Node(13); 
		System.out.println("Dist(4, 10) = "
							+ findDistance(root, 4, 10)); 
							
		System.out.println("Dist(8, 10) = "
							+ findDistance(root, 8, 10)); 
							
		System.out.println("Dist(1, 14) = "
							+ findDistance(root, 1, 14)); 
							
		 

	} 
} 
 


